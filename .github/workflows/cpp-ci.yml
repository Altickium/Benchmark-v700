name: C++ CI

on: [push]
# :
#     branches: [ main, cpp-develop ]
#     paths: [ 'cpp/**' ] 
#   pull_request:
#     branches: [ main, cpp-develop ]
#     paths: [ 'cpp/**' ]

env:
  MAKE_JOBS: ${{ github.runner.os == 'Linux' && '$(nproc)' || '4' }}
  BUILD_JOBS: ${{ github.runner.os == 'Linux' && '$(nproc)' || '4' }}
  BUILD_DIR: cpp/build
  CMAKE_ARGS: -DCMAKE_BUILD_TYPE=Release

jobs:
  # ==================== CONFIGURE STAGE ====================
  configure_benchmark:
    name: "Configure CMAKE, download submodules and Linter"

    strategy:
      matrix:
        toolchain:
          - { name: Linux/GCC,   os: ubuntu-24.04, compiler: gcc , compiler_version: 15}
          - { name: Linux/Clang, os: ubuntu-24.04, compiler: clang, compiler_version: 18 }

    runs-on: ${{matrix.toolchain.os}}

    container:
      image:
        ${{
        contains(matrix.toolchain.os, 'ubuntu') &&
        format('ghcr.io/altickium/benchmark-{0}:{1}', matrix.toolchain.compiler, matrix.toolchain.compiler_version) ||
        null
        }}
      options:
        --workdir /github/workspace --security-opt seccomp=unconfined

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive' 
          path: 'github/workspace'
      
      - name: Upload Submodules
        uses: actions/upload-artifact@v4
        with:
          name: submodules
          path: |
            .git/modules
            .gitmodules

      - name: Create build directory
        working-directory: ./cpp
        run: |
          mkdir -p cpp/build
          mkdir -p cpp/microbench/bin

      - name: Configure CMake
        working-directory: ./cpp/build
        run: |
          cd cpp/build
          cmake .. ${CMAKE_ARGS}
        shell: bash

      - name: Upload Microbench Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: microbench-bin-${{ matrix.toolchain.name }}
          path: cpp/microbench/bin
          retention-days: 1

  # ==================== TEST STAGE ====================
  test_benchmark_options:
    name: "Test Microbench (Build Options)"

    strategy:
      matrix:
        toolchain:
          - { name: Linux/GCC,   os: ubuntu-24.04, compiler: gcc , compiler_version: 15}
          - { name: Linux/Clang, os: ubuntu-24.04, compiler: clang, compiler_version: 18 }
        use_asserts: ["ON", "OFF"]
        use_timelines: ["ON", "OFF"]
        has_libpapi: ["ON", "OFF"]
        has_libnuma: ["ON", "OFF"]
        use_openmp: ["ON", "OFF"]
        exclude:
          - use_timelines: "ON"
            use_openmp: "OFF"
          - has_libpapi: "OFF"
            use_timelines: "ON"

    container:
      image:
        ${{
        contains(matrix.toolchain.os, 'ubuntu') &&
        format('ghcr.io/altickium/benchmark-{0}:{1}', matrix.toolchain.compiler, matrix.toolchain.compiler_version) ||
        null
        }}
      options:
        --security-opt seccomp=unconfined

    runs-on: ${{matrix.toolchain.os}}

    needs: configure_benchmark
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: microbench-bin
          path: cpp/microbench/bin
      - uses: actions/download-artifact@v4
        with:
          name: submodules 
          path: .git 

      - name: Test Different Build Flags
        working-directory: ./cpp/microbench
        run: |
          echo "#########################################################"
          echo "## Building with flags:"
          echo "##   USE_ASSERTS=${{ matrix.use_asserts }}"
          echo "##   USE_TIMELINES=${{ matrix.use_timelines }}"
          echo "##   HAS_LIBPAPI=${{ matrix.has_libpapi }}"
          echo "##   HAS_LIBNUMA=${{ matrix.has_libnuma }}"
          echo "##   USE_OPENMP=${{ matrix.use_openmp }}"
          echo "#########################################################"
          cmake -B build \
            -DCMAKE_C_COMPILER=${{ matrix.toolchain.compiler }}-${{ matrix.toolchain.compiler_version }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.toolchain.compiler }}-${{ matrix.toolchain.compiler_version }} \
            -DUSE_ASSERTS=${{ matrix.use_asserts }} \
            -DUSE_TIMELINES=${{ matrix.use_timelines }} \
            -DHAS_LIBPAPI=${{ matrix.has_libpapi }} \
            -DHAS_LIBNUMA=${{ matrix.has_libnuma }} \
            -DUSE_OPENMP=${{ matrix.use_openmp }}

          cmake --build . --parallel ${{ env.BUILD_JOBS }}  

  # test_benchmark_targets:
  #   name: "Test Microbench (Targets)"
  #   runs-on: ubuntu-latest
  #   needs: build_benchmark
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: microbench-bin
  #         path: cpp/microbench/bin
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: submodules 
  #         path: .git 
      

  #     - name: Test Specific Targets
  #       working-directory: ./cpp/microbench
  #       run: |
  #         echo "#########################################################"
  #         echo "## make ds-reclaim-pool"
  #         echo "#########################################################"
  #         cmake --build . --target ds-reclaim-pool --parallel ${{ env.BUILD_JOBS }}

  # test_benchmark_recordmanagers:
  #   name: "Test Microbench (Record Managers)"
  #   runs-on: ubuntu-latest
  #   needs: build_benchmark
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: microbench-bin
  #         path: cpp/microbench/bin
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: submodules 
  #         path: .git 

  #     - name: Test Reclaimers and Pools
  #       working-directory: ./cpp/build
  #       run: |
  #         cmake -DDATA_STRUCTURES="brown_ext_abtree_lf" \
  #               -DRECLAIMERS="none;debra;debracap;ebr_token;ebr_tree;hazardptr" \
  #               -DPOOLS="none;numa" ..
  #         cmake --build . --parallel ${{ env.BUILD_JOBS }}
