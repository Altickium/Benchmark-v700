name: C++ CI

on: [push]
# :
#     branches: [ main, cpp-develop ]
#     paths: [ 'cpp/**' ] 
#   pull_request:
#     branches: [ main, cpp-develop ]
#     paths: [ 'cpp/**' ]

env:
  MAKE_JOBS: ${{ github.runner.os == 'Linux' && '$(nproc)' || '4' }}
  BUILD_JOBS: ${{ github.runner.os == 'Linux' && '$(nproc)' || '4' }}
  BUILD_DIR: cpp/build
  CMAKE_ARGS: -DCMAKE_BUILD_TYPE=Release

jobs:
  # ==================== BUILD STAGE ====================
  build_benchmark:

    strategy:
      matrix:
        toolchain:
          - { name: Linux/GCC,   os: ubuntu-24.04, compiler: gcc }
          # - { name: Linux/Clang, os: ubuntu-24.04, compiler: clang }
        
    name: "Build Microbench with ${{ matrix.toolchain.name }}"

    runs-on: ${{matrix.toolchain.os}}

    container:
      image:
        ${{
        contains(matrix.toolchain.os, 'ubuntu') &&
        format('ghcr.io/altickium/benchmark-{0}:latest', matrix.toolchain.compiler) ||
        null
        }}
      options:
        --security-opt seccomp=unconfined

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive' 

      # - name: Install dependencies
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y build-essential cmake libpapi-dev libnuma-dev
      
      - name: Upload Submodules
        uses: actions/upload-artifact@v4
        with:
          name: submodules
          path: |
            .git/modules
            .gitmodules

      # - name: Build Microbench
      #   working-directory: ./cpp/microbench
      #   run: make -j${{ env.MAKE_JOBS }}

      - name: Create build directory
        working-directory: ./cpp
        run: mkdir -p build

      - name: Configure CMake
        working-directory: ./cpp/build
        run: cmake $GITHUB_WORKSPACE/cpp ${CMAKE_ARGS}

      - name: Build Microbench
        working-directory: ./cpp/build
        run: cmake --build . --parallel ${{ env.BUILD_JOBS }}

      - name: Upload Microbench Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: microbench-bin
          path: cpp/microbench/bin

  # ==================== TEST STAGE ====================
  test_benchmark_options:
    name: "Test Microbench (Build Options)"
    runs-on: ubuntu-latest
    needs: build_benchmark
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: microbench-bin
          path: cpp/microbench/bin
      - uses: actions/download-artifact@v4
        with:
          name: submodules 
          path: .git 


      - name: Test Different Build Flags
        working-directory: ./cpp/microbench
        run: |
          echo "#########################################################"
          echo "## make"
          echo "#########################################################"
          cmake --build . --parallel ${{ env.BUILD_JOBS }}

          echo "#########################################################"
          echo "## use_asserts=1"
          echo "#########################################################"
          cmake -DUSE_ASSERTS=ON ..
          cmake --build . --parallel ${{ env.BUILD_JOBS }}

          echo "#########################################################"
          echo "## use_asserts=1 use_timelines=1"
          echo "#########################################################"
          cmake -DUSE_ASSERTS=ON -DUSE_TIMELINES=ON ..
          cmake --build . --parallel ${{ env.BUILD_JOBS }}

          echo "#########################################################"
          echo "## has_libpapi=0"
          echo "#########################################################"
          cmake -DHAS_LIBPAPI=OFF ..
          cmake --build . --parallel ${{ env.BUILD_JOBS }}

          echo "#########################################################"
          echo "## has_libpapi=0 has_libnuma=0"
          echo "#########################################################"
          cmake -DHAS_LIBPAPI=OFF -DHAS_LIBNUMA=OFF ..
          cmake --build . --parallel ${{ env.BUILD_JOBS }}

          echo "#########################################################"
          echo "## has_libpapi=0 has_libnuma=0 use_openmp=0"
          echo "#########################################################"
          cmake -DHAS_LIBPAPI=OFF -DHAS_LIBNUMA=OFF -DUSE_OPENMP=OFF ..
          cmake --build . --parallel ${{ env.BUILD_JOBS }}

  test_benchmark_targets:
    name: "Test Microbench (Targets)"
    runs-on: ubuntu-latest
    needs: build_benchmark
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: microbench-bin
          path: cpp/microbench/bin
      - uses: actions/download-artifact@v4
        with:
          name: submodules 
          path: .git 
      

      - name: Test Specific Targets
        working-directory: ./cpp/microbench
        run: |
          echo "#########################################################"
          echo "## make ds-reclaim-pool"
          echo "#########################################################"
          cmake --build . --target ds-reclaim-pool --parallel ${{ env.BUILD_JOBS }}

  test_benchmark_recordmanagers:
    name: "Test Microbench (Record Managers)"
    runs-on: ubuntu-latest
    needs: build_benchmark
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: microbench-bin
          path: cpp/microbench/bin
      - uses: actions/download-artifact@v4
        with:
          name: submodules 
          path: .git 

      - name: Test Reclaimers and Pools
        working-directory: ./cpp/build
        run: |
          cmake -DDATA_STRUCTURES="brown_ext_abtree_lf" \
                -DRECLAIMERS="none;debra;debracap;ebr_token;ebr_tree;hazardptr" \
                -DPOOLS="none;numa" ..
          cmake --build . --parallel ${{ env.BUILD_JOBS }}
